aspect HardwareUsage {
    pattern "PrintHardwareUsage" : "void" "MyScene" "update";
    pattern "PrintHardwareUsage_init" : "" "MyScene" "MyScene";

    PrintHardwareUsage::define {
        #include "stdlib.h"
        #include "stdio.h"
        #include "string.h"
        #include "sys/times.h"
        #include "sys/vtimes.h"

        static clock_t lastCPU, lastSysCPU, lastUserCPU;
        static int numProcessors;
        static unsigned short int displayCPU_RAM = 0;

        void initCpuUsage(){
            FILE* file;
            struct tms timeSample;
            char line[128];

            lastCPU = times(&timeSample);
            lastSysCPU = timeSample.tms_stime;
            lastUserCPU = timeSample.tms_utime;

            file = fopen("/proc/cpuinfo", "r");
            numProcessors = 0;
            while(fgets(line, 128, file) != NULL){
                if (strncmp(line, "processor", 9) == 0) numProcessors++;
            }
            fclose(file);
        }

        double getUsedCPU(){
            struct tms timeSample;
            clock_t now;
            double percent;

            now = times(&timeSample);
            if (now <= lastCPU || timeSample.tms_stime < lastSysCPU ||
                timeSample.tms_utime < lastUserCPU){
                //Overflow detection. Just skip this value.
                percent = -1.0;
            }
            else{
                percent = (timeSample.tms_stime - lastSysCPU) +
                    (timeSample.tms_utime - lastUserCPU);
                percent /= (now - lastCPU);
                percent /= numProcessors;
                percent *= 100;
            }
            lastCPU = now;
            lastSysCPU = timeSample.tms_stime;
            lastUserCPU = timeSample.tms_utime;

            return percent;
        }

        int parseLine(char* line){
            // This assumes that a digit will be found and the line ends in " Kb".
            int i = strlen(line);
            const char* p = line;
            while (*p <'0' || *p > '9') p++;
            line[i-3] = '\0';
            i = atoi(p);
            return i;
        }

        int getUsedRam(){ //Note: this value is in KB!
            FILE* file = fopen("/proc/self/status", "r");
            int result = -1;
            char line[128];

            while (fgets(line, 128, file) != NULL){
                if (strncmp(line, "VmRSS:", 6) == 0){
                    result = parseLine(line);
                    break;
                }
            }
            fclose(file);
            return result;
        }
    }

    PrintHardwareUsage::after {
        displayCPU_RAM++;
        if (displayCPU_RAM > 300) { // Every 5 seconds with 60 FPS
            std::cout << "########## CPU - Memory usage ##########" << std::endl;
            std::cout << getUsedRam() << " KB RAM used by this process" << std::endl;
            std::cout << getUsedCPU() << " \% CPU used by this process\n" << std::endl;
            displayCPU_RAM = 0;
        }
    }

    PrintHardwareUsage_init::after {
        initCpuUsage();
    }
}